<script th:inline="javascript">
    /*<![CDATA[*/
    var robotInfos = /*[[${robotInfos}]]*/ [];
    var codeOfFirstRobot = 'defaultCode'; // 기본 코드 설정
    let selectedDeckLobby = 0;
    let editorLobby;
    let hasErrorBeenShown = false;
    if (robotInfos.length > 0) {
        codeOfFirstRobot = robotInfos[0].code; // 0번 인덱스의 코드로 설정
    }
  
    require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' } });
    require(["vs/editor/editor.main"], function () {
      editorLobby = monaco.editor.create(document.getElementById('container-lobby-body'), {
        value: codeOfFirstRobot,
        language: 'java',
        theme: 'vs-dark',
        automaticLayout: true,
        fontSize: 20,
        minimap: {
            
            enabled: false,
        },
        wordWrap: "on"
      });
    });
  
    function getEditorValue() {
        if (editorLobby) {
            const content = editorLobby.getValue();// Display the content, you can do whatever you want with it
            return content;
        }
    }
     function code_check_lobby(result, status, index, code) {
        const terminal = document.getElementById('terminal-lobby');
        console.log("result :", result, "status: ", status)
        if (result != 0) {
            if (!hasErrorBeenShown) { // 첫번째 에러만 띄우기 위한 체크
                const translatedError = translateErrorToKorean(status);
                console.log("aaaaaaaa",status);
                terminal.innerHTML = `<span class="terminal-error">${translatedError}: ${result}</span>`;
                hasErrorBeenShown = true; // 에러가 띄워졌다고 체크
            }
        } else {
            terminal.innerHTML = `<span class="terminal-success">${status}: ${result}</span>`;
            robotInfos[index] = code;
        }
    }
  
  
      function selectDeckIndexLobby(deckId) {
          selectedDeckLobby = deckId;
          console.log(robotInfos)
          if (robotInfos[selectedDeckLobby]) {
              editorLobby.setValue(robotInfos[selectedDeckLobby].code)
              console.log(selectedDeckLobby);
          } else {
              console.log('No robot info found for selected deck.')
          }
      }
  
      function run_code() {
          compile_code(selectedDeckLobby, getEditorValue());
      }
      function translateErrorToKorean(status) {
            // 간단한 예제로 에러 메시지를 한국어로 번역하는 함수
            // 필요한 만큼 메시지를 추가하거나 수정할 수 있습니다.
            console.log('status',status);
            const errorTranslations = {
                "ZeroDivisionError": "0 으로 나눌 수 없습니다!",
                "SyntaxError": "코드 구문이 잘못되었습니다. 오타나 문법을 확인해주세요",
                "TypeError": "데이터 타입이 잘못 사용되었습니다. 숫자와 문자열은 서로 더할 수 없습니다",
                "IndexError":"리스트나 배열 등에서 인덱스 범위를 벗어난 접근입니다",
                "KeyError":"딕셔너리에 존재하지 않는 키를 사용합니다",
                "ValueError": "유효하지 않은 값을 실행하였습니다",
                "AttributeError": "객체에 존재하지 않는 속성이나 메서드를 사용합니다",
                "ImportError": "모듈을 불러올 수 없거나 잘못된 모듈을 불러옵니다",
                "IOError":"파일을 읽거나 쓰는 등의 입출력 작업에서 오류가 발생했습니다",
                "FileNotFoundError": "파일을 찾을 수 없습니다",
                "OverflowError": "숫자가 처리 가능한 범위를 벗어났습니다",
                "RecursionError":"재귀 함수가 너무 깊이 호출되었습니다",
                "ConnectionError": "네트워크 오류!"
            };

            return errorTranslations[status] || "알 수 없는 오류"; // 만약 번역되지 않은 에러가 있으면 '알 수 없는 오류'를 반환
        }

    function enter_ingame() {
        let specIndex = (selectedDeckLobby + 1);
        window.location.href='/ingame?specIndex=' + specIndex;
      }
      /*]]>*/
  </script>